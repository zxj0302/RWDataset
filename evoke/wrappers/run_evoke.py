import os
import numpy as np
from tqdm import tqdm
import torch
import sys
from multiprocessing import Pool, cpu_count

matrices = dict()
matrices[3] = np.matrix('1 0 2 ;'
                        '0 1 1 ;'
                        '0 0 1 ')
# changed matrices[1][9] from 2 to 4, because their code is wrong
matrices[4] = np.matrix('1 0 0 0 2 2 1 0 4 2 6 ;'
                        '0 1 0 0 2 0 1 2 2 4 6 ;'
                        '0 0 1 0 0 1 1 0 2 1 3 ;'
                        '0 0 0 1 0 0 0 1 0 1 1 ;'
                        '0 0 0 0 1 0 0 0 1 1 3 ;'
                        '0 0 0 0 0 1 0 0 2 0 3 ;'
                        '0 0 0 0 0 0 1 0 2 2 6 ;'
                        '0 0 0 0 0 0 0 1 0 2 3 ;'
                        '0 0 0 0 0 0 0 0 1 0 3 ;'
                        '0 0 0 0 0 0 0 0 0 1 3 ;'
                        '0 0 0 0 0 0 0 0 0 0 1')
matrices[5] = np.matrix(
    '1 0 0 0 0 0 0 0 0 1 0 0 2 0 1 0 0 0 0 2 2 0 1 0 2 1 0 0 2 0 4 2 0 1 4 0 3 4 2 4 0 6 2 0 6 3 2 8 4 6 12 8 4 10 8 '
    '18 12 24 ;'
    '0 1 0 0 0 0 0 0 0 0 0 1 0 2 1 0 0 0 0 2 0 2 0 2 0 0 2 2 2 0 0 2 4 1 0 6 3 2 3 0 6 0 2 6 3 5 4 4 8 4 4 6 10 10 8 '
    '12 16 24 ;'
    '0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 2 0 0 0 1 0 0 1 0 0 1 0 0 0 4 0 0 0 2 2 0 1 1 2 2 0 0 2 0 1 2 4 2 2 4 2 4 4 4 8 6 '
    '8 12 ;'
    '0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 2 0 0 1 1 2 0 1 0 2 2 0 0 0 3 2 0 0 2 3 3 2 0 3 2 0 4 3 0 6 4 3 5 0 9 '
    '6 12 ;'
    '0 0 0 0 1 0 0 0 0 1 2 0 0 0 1 0 2 0 0 0 2 0 1 0 4 3 0 0 2 0 2 2 0 2 4 0 1 4 1 8 0 6 4 0 6 3 2 4 2 6 12 10 4 8 8 '
    '18 12 24 ;'
    '0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 2 1 1 0 0 0 2 1 2 0 1 0 1 2 3 0 2 3 1 3 2 2 2 2 2 4 5 4 4 6 '
    '8 12 ;'
    '0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 2 0 0 0 0 2 0 0 1 4 0 4 0 0 2 1 0 3 0 0 2 0 6 0 1 6 0 2 6 0 3 2 0 2 8 3 8 3 '
    '10 12 ;'
    '0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 2 1 1 1 0 1 1 0 0 0 0 2 2 1 1 0 3 '
    '2 4 ;'
    '0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 '
    '1 1 ;'
    '0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 0 2 2 0 0 0 0 1 0 0 4 0 6 2 0 4 1 0 4 2 0 12 6 2 6 0 '
    '18 8 24 ;'
    '0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 2 0 0 2 0 1 1 1 0 0 2 2 4 2 2 4 6 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 0 0 0 0 2 1 0 0 0 0 1 0 6 0 2 6 0 3 4 0 2 2 0 4 10 4 8 6 '
    '16 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 1 0 0 0 0 3 0 0 2 1 0 4 1 0 6 2 1 4 0 9 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 0 0 1 0 0 0 0 0 0 3 1 2 0 2 2 0 2 2 3 4 0 6 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 1 0 0 0 2 1 0 0 0 2 0 3 2 2 0 2 4 4 6 4 6 8 12 '
    '12 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 1 4 0 1 2 0 2 4 2 8 3 '
    '8 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 4 0 3 1 0 2 1 0 0 0 0 6 4 1 2 0 9 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 2 0 1 0 0 0 0 0 0 0 0 0 0 2 3 0 2 0 1 2 0 0 0 0 2 4 3 2 0 6 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 0 0 0 0 0 3 0 0 3 0 0 3 0 0 0 0 0 4 0 4 0 '
    '5 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 2 2 2 2 2 2 4 4 6 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 2 0 0 2 0 2 0 3 0 0 2 0 0 2 0 3 6 3 0 3 4 9 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 3 1 0 0 0 3 0 1 0 1 1 0 2 3 0 2 2 3 4 0 6 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 4 0 1 0 1 4 0 0 2 0 1 2 2 4 2 4 4 6 4 6 8 12 '
    '12 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 3 0 0 1 0 3 0 0 3 0 1 2 0 3 1 0 1 5 3 4 3 '
    '8 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 1 0 0 0 0 0 6 2 0 1 0 9 '
    '2 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 2 0 1 1 0 0 0 0 4 6 2 2 0 12 '
    '8 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 1 0 0 1 0 0 0 0 0 2 3 1 0 3 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 3 0 0 2 0 0 0 0 0 5 0 4 0 '
    '8 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 2 2 1 2 0 6 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 2 0 '
    '2 3 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 3 0 0 1 0 0 2 0 0 6 1 0 2 0 9 '
    '2 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 2 2 1 2 0 6 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 3 0 1 0 0 1 0 0 1 3 2 0 3 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 0 0 1 2 0 0 2 0 4 4 2 8 6 '
    '12 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 1 1 0 1 2 3 '
    '2 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 '
    '2 4 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 4 2 0 4 2 2 6 0 12 '
    '8 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 2 2 2 0 2 4 6 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 2 0 2 2 0 2 4 4 8 6 '
    '12 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 3 '
    '1 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 '
    '2 4 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 0 0 0 0 3 '
    '0 4 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 1 0 0 3 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 '
    '2 4 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 4 2 0 2 0 12 '
    '4 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 2 2 2 0 6 '
    '8 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 2 0 4 0 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 3 '
    '1 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 2 0 3 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 4 3 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 3 '
    '0 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 3 '
    '2 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 3 '
    '2 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 '
    '1 3 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 '
    '0 4 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 '
    '1 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 '
    '0 1')

# get the first argument which is the edgelist type, graph or desco-egonetwork
edgelist_type = sys.argv[1]
assert edgelist_type in ['graph', 'desco']
edgelist_path = f'edgelist_{edgelist_type}'

# run the program on each files in the edgelist_path folder
num_file = len(os.listdir(edgelist_path))
# there are indices for desco-egonetworks
if edgelist_type == 'desco':
    num_file = num_file // 2
print(f'Running evoke for {edgelist_type} on {num_file} files')
# multiprocessing for ground truth computation
with Pool(cpu_count()) as p:
    res = list(tqdm(p.imap_unordered(os.system, [f'../exe/count_orbit_five {edgelist_path}/rw_{i}.edgelist opnmp > '
        f'/dev/null' for i in range(num_file)]), total=num_file, desc='Non-induced orbit counts'))

# read in the non-induced counts, organize and store
for i in tqdm(range(num_file), desc='Non-induced orbit -> (Non-)Induced pattern counts'):
    # read in the output file to get the non-induced orbit counts
    with open(f'output_evoke/out_rw_{i}', 'r') as f_in:
        non_induced = np.array([np.array([int(float(x)) for x in line.split()]) for line in f_in])
    if edgelist_type == 'desco':
        index_map = list(map(int, open(f'{edgelist_path}/rw_{i}.index', 'r').readline().split()))
        non_induced = non_induced[index_map, :]

    # compute the induced orbit counts
    non_induced_t = np.transpose(non_induced)
    induced_3 = np.linalg.solve(matrices[3], non_induced_t[1:4, :])
    induced_4 = np.linalg.solve(matrices[4], non_induced_t[4:15, :])
    induced_5 = np.linalg.solve(matrices[5], non_induced_t[15:, :])
    induced = np.concatenate((non_induced_t[:1, :], induced_3, induced_4, induced_5), axis=0).T

    # convert the orbit counts to pattern counts
    noninduced_patterns = torch.tensor([[x[0], x[1]+x[2], x[3], x[4]+x[5], x[6]+x[7], x[8], x[9]+x[10]+x[11], x[12]+x[13],
                                         x[14], x[15]+x[16]+x[17], x[18]+x[19]+x[20]+x[21], x[22]+x[23], x[24]+x[25]+x[26],
                                         x[27]+x[28]+x[29]+x[30], x[31]+x[32]+x[33], x[34], x[35]+x[36]+x[37]+x[38],
                                         x[39]+x[40]+x[41]+x[42], x[43]+x[44], x[45]+x[46]+x[47]+x[48], x[49]+x[50],
                                         x[51]+x[52]+x[53], x[54]+x[55], x[56]+x[57]+x[58], x[59]+x[60]+x[61],
                                         x[62]+x[63]+x[64], x[65]+x[66]+x[67], x[68]+x[69], x[70]+x[71], x[72]]
                                        for x in non_induced.tolist()], dtype=torch.int64).T
    induced_patterns = torch.tensor([[x[0], x[1]+x[2], x[3], x[4]+x[5], x[6]+x[7], x[8], x[9]+x[10]+x[11], x[12]+x[13],
                                      x[14], x[15]+x[16]+x[17], x[18]+x[19]+x[20]+x[21], x[22]+x[23], x[24]+x[25]+x[26],
                                      x[27]+x[28]+x[29]+x[30], x[31]+x[32]+x[33], x[34], x[35]+x[36]+x[37]+x[38],
                                      x[39]+x[40]+x[41]+x[42], x[43]+x[44], x[45]+x[46]+x[47]+x[48], x[49]+x[50],
                                      x[51]+x[52]+x[53], x[54]+x[55], x[56]+x[57]+x[58], x[59]+x[60]+x[61],
                                      x[62]+x[63]+x[64], x[65]+x[66]+x[67], x[68]+x[69], x[70]+x[71], x[72]]
                                     for x in induced.tolist()], dtype=torch.int64).T

    if edgelist_type == 'graph':
        torch.save(noninduced_patterns.T, f'output_graph/noninduced_rw_{i}.pt')
        torch.save(induced_patterns.T, f'output_graph/induced_rw_{i}.pt')
    elif edgelist_type == 'desco':
        reordered_noninduced = []
        for r in [1, 2, 4, 3, 6, 5, 7, 8, 11, 10, 9, 14, 12, 13, 16, 15, 17, 19, 18, 21, 20, 23, 22, 24, 25, 26, 27, 28, 29]:
            reordered_noninduced.append(noninduced_patterns[r].tolist())
        reordered_induced = []
        for r in [1, 2, 4, 3, 6, 5, 7, 8, 11, 10, 9, 14, 12, 13, 16, 15, 17, 19, 18, 21, 20, 23, 22, 24, 25, 26, 27, 28, 29]:
            reordered_induced.append(induced_patterns[r].tolist())
        torch.save(torch.tensor(reordered_noninduced).T, f'output_desco/noninduced_rw_{i}.pt')
        torch.save(torch.tensor(reordered_induced).T, f'output_desco/induced_rw_{i}.pt')