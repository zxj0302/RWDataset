import os
import numpy as np
import sys
import math
#from numpy.linalg import inv
import time




matrices = dict() # conversion matrices (A): converting induced counts to non-induced counts

matrices[3] = np.matrix('1 0 2 ;'
                        '0 1 1 ;'
                        '0 0 1 ')

matrices[4] = np.matrix('1 0 0 0 2 2 1 0 4 2 6 ;'
                        '0 1 0 0 2 0 1 2 2 2 6 ;'
                        '0 0 1 0 0 1 1 0 2 1 3 ;'
                        '0 0 0 1 0 0 0 1 0 1 1 ;'
                        '0 0 0 0 1 0 0 0 1 1 3 ;'
                        '0 0 0 0 0 1 0 0 2 0 3 ;'
                        '0 0 0 0 0 0 1 0 2 2 6 ;'
                        '0 0 0 0 0 0 0 1 0 2 3 ;'
                        '0 0 0 0 0 0 0 0 1 0 3 ;'
                        '0 0 0 0 0 0 0 0 0 1 3 ;'
                        '0 0 0 0 0 0 0 0 0 0 1')

matrices[5] = np.matrix('1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 2.0 0.0 1.0 0.0 0.0 0.0 0.0 2.0 2.0 0.0 1.0 0.0 2.0 1.0 0.0 0.0 2.0 0.0 4.0 2.0 0.0 1.0 4.0 0.0 3.0 4.0 2.0 4.0 0.0 6.0 2.0 0.0 6.0 3.0 2.0 8.0 4.0 6.0 12.0 8.0 4.0 10.0 8.0 18.0 12.0 24.0 ;'
                        '0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 2.0 1.0 0.0 0.0 0.0 0.0 2.0 0.0 2.0 0.0 2.0 0.0 0.0 2.0 2.0 2.0 0.0 0.0 2.0 4.0 1.0 0.0 6.0 3.0 2.0 3.0 0.0 6.0 0.0 2.0 6.0 3.0 5.0 4.0 4.0 8.0 4.0 4.0 6.0 10.0 10.0 8.0 12.0 16.0 24.0 ;'
                        '0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 2.0 0.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0 4.0 0.0 0.0 0.0 2.0 2.0 0.0 1.0 1.0 2.0 2.0 0.0 0.0 2.0 0.0 1.0 2.0 4.0 2.0 2.0 4.0 2.0 4.0 4.0 4.0 8.0 6.0 8.0 12.0 ;'
                        '0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 2.0 0.0 0.0 1.0 1.0 2.0 0.0 1.0 0.0 2.0 2.0 0.0 0.0 0.0 3.0 2.0 0.0 0.0 2.0 3.0 3.0 2.0 0.0 3.0 2.0 0.0 4.0 3.0 0.0 6.0 4.0 3.0 5.0 0.0 9.0 6.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 2.0 0.0 0.0 0.0 1.0 0.0 2.0 0.0 0.0 0.0 2.0 0.0 1.0 0.0 4.0 3.0 0.0 0.0 2.0 0.0 2.0 2.0 0.0 2.0 4.0 0.0 1.0 4.0 1.0 8.0 0.0 6.0 4.0 0.0 6.0 3.0 2.0 4.0 2.0 6.0 12.0 10.0 4.0 8.0 8.0 18.0 12.0 24.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 1.0 2.0 1.0 1.0 0.0 0.0 0.0 2.0 1.0 2.0 0.0 1.0 0.0 1.0 2.0 3.0 0.0 2.0 3.0 1.0 3.0 2.0 2.0 2.0 2.0 2.0 4.0 5.0 4.0 4.0 6.0 8.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 2.0 0.0 0.0 0.0 0.0 2.0 0.0 0.0 1.0 4.0 0.0 4.0 0.0 0.0 2.0 1.0 0.0 3.0 0.0 0.0 2.0 0.0 6.0 0.0 1.0 6.0 0.0 2.0 6.0 0.0 3.0 2.0 0.0 2.0 8.0 3.0 8.0 3.0 10.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0 1.0 1.0 1.0 0.0 1.0 1.0 0.0 0.0 0.0 0.0 2.0 2.0 1.0 1.0 0.0 3.0 2.0 4.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 0.0 1.0 1.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0 1.0 0.0 0.0 0.0 0.0 2.0 2.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 4.0 0.0 6.0 2.0 0.0 4.0 1.0 0.0 4.0 2.0 0.0 12.0 6.0 2.0 6.0 0.0 18.0 8.0 24.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 2.0 0.0 0.0 2.0 0.0 1.0 1.0 1.0 0.0 0.0 2.0 2.0 4.0 2.0 2.0 4.0 6.0 6.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0 2.0 0.0 0.0 0.0 0.0 2.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 6.0 0.0 2.0 6.0 0.0 3.0 4.0 0.0 2.0 2.0 0.0 4.0 10.0 4.0 8.0 6.0 16.0 24.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 2.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 3.0 0.0 0.0 2.0 1.0 0.0 4.0 1.0 0.0 6.0 2.0 1.0 4.0 0.0 9.0 4.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 2.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 3.0 1.0 2.0 0.0 2.0 2.0 0.0 2.0 2.0 3.0 4.0 0.0 6.0 6.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0 0.0 0.0 2.0 0.0 1.0 0.0 0.0 0.0 2.0 1.0 0.0 0.0 0.0 2.0 0.0 3.0 2.0 2.0 0.0 2.0 4.0 4.0 6.0 4.0 6.0 8.0 12.0 12.0 24.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 1.0 4.0 0.0 1.0 2.0 0.0 2.0 4.0 2.0 8.0 3.0 8.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.0 0.0 3.0 1.0 0.0 2.0 1.0 0.0 0.0 0.0 0.0 6.0 4.0 1.0 2.0 0.0 9.0 4.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 2.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0 3.0 0.0 2.0 0.0 1.0 2.0 0.0 0.0 0.0 0.0 2.0 4.0 3.0 2.0 0.0 6.0 6.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0 0.0 2.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 3.0 0.0 0.0 3.0 0.0 0.0 3.0 0.0 0.0 0.0 0.0 0.0 4.0 0.0 4.0 0.0 5.0 6.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 2.0 2.0 2.0 2.0 2.0 2.0 4.0 4.0 6.0 6.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 2.0 0.0 0.0 2.0 0.0 2.0 0.0 3.0 0.0 0.0 2.0 0.0 0.0 2.0 0.0 3.0 6.0 3.0 0.0 3.0 4.0 9.0 4.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 3.0 1.0 0.0 0.0 0.0 3.0 0.0 1.0 0.0 1.0 1.0 0.0 2.0 3.0 0.0 2.0 2.0 3.0 4.0 0.0 6.0 6.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 4.0 0.0 1.0 0.0 1.0 4.0 0.0 0.0 2.0 0.0 1.0 2.0 2.0 4.0 2.0 4.0 4.0 6.0 4.0 6.0 8.0 12.0 12.0 24.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 3.0 0.0 0.0 1.0 0.0 3.0 0.0 0.0 3.0 0.0 1.0 2.0 0.0 3.0 1.0 0.0 1.0 5.0 3.0 4.0 3.0 8.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0 0.0 3.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 6.0 2.0 0.0 1.0 0.0 9.0 2.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.0 0.0 0.0 2.0 0.0 1.0 1.0 0.0 0.0 0.0 0.0 4.0 6.0 2.0 2.0 0.0 12.0 8.0 24.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 3.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 2.0 3.0 1.0 0.0 3.0 6.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 3.0 0.0 0.0 3.0 0.0 0.0 2.0 0.0 0.0 0.0 0.0 0.0 5.0 0.0 4.0 0.0 8.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 0.0 0.0 0.0 0.0 2.0 2.0 1.0 2.0 0.0 6.0 4.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 2.0 0.0 2.0 3.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 3.0 0.0 0.0 1.0 0.0 0.0 2.0 0.0 0.0 6.0 1.0 0.0 2.0 0.0 9.0 2.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 2.0 2.0 1.0 2.0 0.0 6.0 4.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 3.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 1.0 3.0 2.0 0.0 3.0 6.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0 0.0 0.0 1.0 2.0 0.0 0.0 2.0 0.0 4.0 4.0 2.0 8.0 6.0 12.0 24.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 1.0 1.0 0.0 1.0 2.0 3.0 2.0 6.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 1.0 0.0 1.0 2.0 4.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 0.0 4.0 2.0 0.0 4.0 2.0 2.0 6.0 0.0 12.0 8.0 24.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 2.0 2.0 2.0 0.0 2.0 4.0 6.0 4.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 2.0 0.0 2.0 2.0 0.0 2.0 4.0 4.0 8.0 6.0 12.0 24.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 0.0 0.0 0.0 3.0 1.0 6.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 2.0 4.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0 0.0 0.0 0.0 0.0 3.0 0.0 4.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.0 1.0 0.0 0.0 3.0 4.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 2.0 4.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 4.0 2.0 0.0 2.0 0.0 12.0 4.0 24.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 2.0 2.0 2.0 0.0 6.0 8.0 24.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 2.0 0.0 4.0 0.0 6.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 3.0 1.0 6.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 2.0 0.0 3.0 4.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 0.0 1.0 4.0 3.0 4.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 3.0 0.0 6.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 3.0 2.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 4.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 3.0 2.0 12.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 3.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 4.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 6.0 ;'
                        '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0')


if len(sys.argv) < 3:
    print( 'Format: python3 orbit_counts.py <PATH FOR INPUT> <DESIRED PATTERN SIZE> <OPTIONS>\n DESIRED PATTERN SIZE: 3, 4, or 5\n OPTIONS:\n \t -i: for integer outputs, useful in looking at small graphs\n \t -p: for printing orbit counts for all the nodes \n \t -c: for printing induced counts \n \t -n: for counting only node orbits (useful for pattern size 4) \n \t -opnmp: enables parallel counting')
    sys.exit()

integral = False # integer output
orbitPrint = False # printing the output to the screen
inducedCounts = False # Whether we want the induced counts or not
nodeOnly = False # Counting only node orbits or counting both node orbits and edge orbits (useful for pattern size 4)
orbitRowsVertexCols = False # Print to file slicing first on orbits and then on vertices 
parallelism_enabled = False

# timing the conversion from non-incuded counts to induced counts
start_time = time.time()
end_time = time.time()

if '-i' in sys.argv:
    integral = True

if '-p' in sys.argv:
    orbitPrint = True
        
if '-c' in sys.argv:
    inducedCounts = True

if '-n' in sys.argv:
	nodeOnly = True

if '-vr' in sys.argv:
	orbitRowsVertexCols = True

if '-opnmp' in sys.argv:
      parallelism_enabled = True


pattern = int(sys.argv[2])  # size of desired patterns

if orbitRowsVertexCols == False:
    if pattern == 3:   # calling appropriate executable, output is in out.txt
        os.system('../exe/count_orbit_three '+sys.argv[1])
    elif pattern == 4 and nodeOnly == True:
        os.system('../exe/count_orbit_four '+sys.argv[1]+' '+'node')
    elif pattern == 4:
        os.system('../exe/count_orbit_four '+sys.argv[1])
    elif pattern == 5:
        if parallelism_enabled:
            os.system('../exe/count_orbit_five ' + sys.argv[1] + ' opnmp')
        else:
            os.system('../exe/count_orbit_five '+sys.argv[1])
    else:
        print('Incorrect format: Desired pattern size must be 3, 4, or 5')
        sys.exit()

elif orbitRowsVertexCols == True:
    if pattern == 3:   # calling appropriate executable, output is in out.txt
        os.system('../exe/count_orbit_three '+sys.argv[1] + ' vr')
    elif pattern == 4 and nodeOnly == True:
        os.system('../exe/count_orbit_four '+sys.argv[1]+' '+'node' + ' vr')
    elif pattern == 4:
        os.system('../exe/count_orbit_four '+sys.argv[1] + ' vr')
    elif pattern == 5:
        if parallelism_enabled:
            os.system('../exe/count_orbit_five '+sys.argv[1] + ' opnmp' + ' vr')
        else:
            os.system('../exe/count_orbit_five '+sys.argv[1] + ' vr')
    else:
        print('Incorrect format: Desired pattern size must be 3, 4, or 5')
        sys.exit()


# getting the induced counts from the non-induced counts
if inducedCounts:
    start_time = time.time() # timing the conversion from non-incuded counts to induced counts
    with open('out.txt', 'r') as f_in:

        node_orbits = np.array([np.array([float(x) for x in line.split()]) for line in f_in])

        if orbitRowsVertexCols == False:
            node_orbits = np.transpose(node_orbits)

        node_orbits_2 = node_orbits[:1,:]
        node_orbits_3 = node_orbits[1:4,:]
        node_orbits_4 = None
        node_orbits_5 = None

        induced_node_orbits_2 = node_orbits_2
        induced_node_orbits_3 = None
        induced_node_orbits_4 = None
        induced_node_orbits_5 = None

        if pattern >= 4:
            node_orbits_4 = node_orbits[4:15,:]
        if pattern == 5:
            node_orbits_5 = node_orbits[15:,:]
        induced_node_orbits_3 = np.linalg.solve(matrices[3], node_orbits_3)
        #induced_node_orbits_3 = np.array(np.dot(inv(matrices[3]), node_orbits_3))
        if pattern >= 4:
            induced_node_orbits_4 = np.linalg.solve(matrices[4], node_orbits_4)
            #induced_node_orbits_4 = np.array(np.dot(inv(matrices[4]), node_orbits_4))
        if pattern == 5:
        	induced_node_orbits_5 = np.linalg.solve(matrices[5], node_orbits_5)
            #induced_node_orbits_5 = np.array(np.dot(inv(matrices[5]), node_orbits_5))
    end_time = time.time() # timing the conversion from non-incuded counts to induced counts
    
    if orbitRowsVertexCols == True:
        with open('induced_counts_out.txt', 'w') as f_out:
            for i in range(len(induced_node_orbits_2)):
                for j in range(len(induced_node_orbits_2[i])):
                    f_out.write(str(induced_node_orbits_2[i][j]))
                    f_out.write(" ")
                f_out.write("\n")
            for i in range(len(induced_node_orbits_3)):
                for j in range(len(induced_node_orbits_3[i])):
                    f_out.write(str(induced_node_orbits_3[i][j]))
                    f_out.write(" ")
                f_out.write("\n")
            if pattern >= 4:
                for i in range(len(induced_node_orbits_4)):
                    for j in range(len(induced_node_orbits_4[i])):
                        f_out.write(str(induced_node_orbits_4[i][j]))
                        f_out.write(" ")
                    f_out.write("\n")
            if pattern == 5:
                for i in range(len(induced_node_orbits_5)):
                    for j in range(len(induced_node_orbits_5[i])):
                        f_out.write(str(induced_node_orbits_5[i][j]))
                        f_out.write(" ")
                    f_out.write("\n")

    elif orbitRowsVertexCols == False:
        with open('induced_counts_out.txt', 'w') as f_out:
            numberOfNodes = len(induced_node_orbits_3[0])
            for i in range(numberOfNodes):
                for j in range(len(induced_node_orbits_2)):
                    f_out.write(str(induced_node_orbits_2[j][i]))
                    f_out.write(" ")
                for j in range(len(induced_node_orbits_3)):
                    f_out.write(str(induced_node_orbits_3[j][i]))
                    f_out.write(" ")
                if pattern >= 4:
                    for j in range(len(induced_node_orbits_4)):
                        f_out.write(str(induced_node_orbits_4[j][i]))
                        f_out.write(" ")
                if pattern == 5:
                    for j in range(len(induced_node_orbits_5)):
                        f_out.write(str(induced_node_orbits_5[j][i]))
                        f_out.write(" ")
                f_out.write("\n")

# induced counts are computed and written into out.txt at this point



if orbitPrint: # printing the output of the count_orbit code from the file output to the screen

    if orbitRowsVertexCols == True:
        if inducedCounts == True:
            f_in = open('induced_counts_out.txt','r')

            if integral:
                node_orbits = [[math.floor(float(x)) for x in line.split()] for line in f_in]
            else:
                node_orbits = [[float(x) for x in line.split()] for line in f_in]

            for i in range(len(node_orbits)):
                print("Node Orbit ", i,": ", node_orbits[i])

            f_in.close()
        else:
            f_in = open('out.txt','r')

            if integral:
                node_orbits = [[math.floor(float(x)) for x in line.split()] for line in f_in]
            else:
                node_orbits = [[float(x) for x in line.split()] for line in f_in]

            for i in range(len(node_orbits)):
                print("Non-induced node orbit ", i,": ", node_orbits[i])
            f_in.close()

    elif orbitRowsVertexCols == False:
        if inducedCounts == True:
            f_in = open('induced_counts_out.txt','r')

            if integral:
                node_orbits = [[math.floor(float(x)) for x in line.split()] for line in f_in]
            else:
                node_orbits = [[float(x) for x in line.split()] for line in f_in]

            for i in range(len(node_orbits)):
                print("Orbit counts for vertex ", i,": ", node_orbits[i])

            f_in.close()
        else:
            f_in = open('out.txt','r')

            if integral:
                node_orbits = [[math.floor(float(x)) for x in line.split()] for line in f_in]
            else:
                node_orbits = [[float(x) for x in line.split()] for line in f_in]
            for i in range(len(node_orbits)):
                print("Non-induced orbit counts for vertex ", i,": ", node_orbits[i])
            f_in.close()

if inducedCounts == True:
    print("Time to convert non-incuded counts to induced counts in seconds:")
    print(end_time - start_time)