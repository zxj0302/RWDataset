import os
import numpy as np
from tqdm import tqdm
import torch
import sys
from multiprocessing import Pool, cpu_count

matrices = dict()
matrices[3] = np.matrix('1 0 2 ;'
                        '0 1 1 ;'
                        '0 0 1 ')
# changed matrices[1][9] from 2 to 4, because their code is wrong
matrices[4] = np.matrix('1 0 0 0 2 2 1 0 4 2 6 ;'
                        '0 1 0 0 2 0 1 2 2 4 6 ;'
                        '0 0 1 0 0 1 1 0 2 1 3 ;'
                        '0 0 0 1 0 0 0 1 0 1 1 ;'
                        '0 0 0 0 1 0 0 0 1 1 3 ;'
                        '0 0 0 0 0 1 0 0 2 0 3 ;'
                        '0 0 0 0 0 0 1 0 2 2 6 ;'
                        '0 0 0 0 0 0 0 1 0 2 3 ;'
                        '0 0 0 0 0 0 0 0 1 0 3 ;'
                        '0 0 0 0 0 0 0 0 0 1 3 ;'
                        '0 0 0 0 0 0 0 0 0 0 1')
matrices[5] = np.matrix(
    '1 0 0 0 0 0 0 0 0 1 0 0 2 0 1 0 0 0 0 2 2 0 1 0 2 1 0 0 2 0 4 2 0 1 4 0 3 4 2 4 0 6 2 0 6 3 2 8 4 6 12 8 4 10 8 '
    '18 12 24 ;'
    '0 1 0 0 0 0 0 0 0 0 0 1 0 2 1 0 0 0 0 2 0 2 0 2 0 0 2 2 2 0 0 2 4 1 0 6 3 2 3 0 6 0 2 6 3 5 4 4 8 4 4 6 10 10 8 '
    '12 16 24 ;'
    '0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 2 0 0 0 1 0 0 1 0 0 1 0 0 0 4 0 0 0 2 2 0 1 1 2 2 0 0 2 0 1 2 4 2 2 4 2 4 4 4 8 6 '
    '8 12 ;'
    '0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 2 0 0 1 1 2 0 1 0 2 2 0 0 0 3 2 0 0 2 3 3 2 0 3 2 0 4 3 0 6 4 3 5 0 9 '
    '6 12 ;'
    '0 0 0 0 1 0 0 0 0 1 2 0 0 0 1 0 2 0 0 0 2 0 1 0 4 3 0 0 2 0 2 2 0 2 4 0 1 4 1 8 0 6 4 0 6 3 2 4 2 6 12 10 4 8 8 '
    '18 12 24 ;'
    '0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 2 1 1 0 0 0 2 1 2 0 1 0 1 2 3 0 2 3 1 3 2 2 2 2 2 4 5 4 4 6 '
    '8 12 ;'
    '0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 2 0 0 0 0 2 0 0 1 4 0 4 0 0 2 1 0 3 0 0 2 0 6 0 1 6 0 2 6 0 3 2 0 2 8 3 8 3 '
    '10 12 ;'
    '0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 2 1 1 1 0 1 1 0 0 0 0 2 2 1 1 0 3 '
    '2 4 ;'
    '0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 '
    '1 1 ;'
    '0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 0 2 2 0 0 0 0 1 0 0 4 0 6 2 0 4 1 0 4 2 0 12 6 2 6 0 '
    '18 8 24 ;'
    '0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 2 0 0 2 0 1 1 1 0 0 2 2 4 2 2 4 6 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 0 0 0 0 2 1 0 0 0 0 1 0 6 0 2 6 0 3 4 0 2 2 0 4 10 4 8 6 '
    '16 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 1 0 0 0 0 3 0 0 2 1 0 4 1 0 6 2 1 4 0 9 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 0 0 1 0 0 0 0 0 0 3 1 2 0 2 2 0 2 2 3 4 0 6 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 1 0 0 0 2 1 0 0 0 2 0 3 2 2 0 2 4 4 6 4 6 8 12 '
    '12 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 1 4 0 1 2 0 2 4 2 8 3 '
    '8 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 4 0 3 1 0 2 1 0 0 0 0 6 4 1 2 0 9 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 2 0 1 0 0 0 0 0 0 0 0 0 0 2 3 0 2 0 1 2 0 0 0 0 2 4 3 2 0 6 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 0 0 0 0 0 3 0 0 3 0 0 3 0 0 0 0 0 4 0 4 0 '
    '5 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 2 2 2 2 2 2 4 4 6 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 2 0 0 2 0 2 0 3 0 0 2 0 0 2 0 3 6 3 0 3 4 9 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 3 1 0 0 0 3 0 1 0 1 1 0 2 3 0 2 2 3 4 0 6 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 4 0 1 0 1 4 0 0 2 0 1 2 2 4 2 4 4 6 4 6 8 12 '
    '12 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 3 0 0 1 0 3 0 0 3 0 1 2 0 3 1 0 1 5 3 4 3 '
    '8 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 1 0 0 0 0 0 6 2 0 1 0 9 '
    '2 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 2 0 1 1 0 0 0 0 4 6 2 2 0 12 '
    '8 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 1 0 0 1 0 0 0 0 0 2 3 1 0 3 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 3 0 0 2 0 0 0 0 0 5 0 4 0 '
    '8 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 2 2 1 2 0 6 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 2 0 '
    '2 3 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 3 0 0 1 0 0 2 0 0 6 1 0 2 0 9 '
    '2 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 2 2 1 2 0 6 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 3 0 1 0 0 1 0 0 1 3 2 0 3 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 0 0 1 2 0 0 2 0 4 4 2 8 6 '
    '12 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 1 1 0 1 2 3 '
    '2 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 '
    '2 4 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 4 2 0 4 2 2 6 0 12 '
    '8 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 2 2 2 0 2 4 6 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 2 0 2 2 0 2 4 4 8 6 '
    '12 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 3 '
    '1 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 '
    '2 4 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 0 0 0 0 3 '
    '0 4 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 1 0 0 3 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 '
    '2 4 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 4 2 0 2 0 12 '
    '4 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 2 2 2 0 6 '
    '8 24 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 2 0 4 0 '
    '6 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 3 '
    '1 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 2 0 3 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 4 3 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 3 '
    '0 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 3 '
    '2 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 '
    '4 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 3 '
    '2 12 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 '
    '1 3 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 '
    '0 4 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 '
    '1 6 ;'
    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 '
    '0 1')

edgelist_path = 'edgelist_graph'
num_file = len(os.listdir(edgelist_path))

# multiprocessing for ground truth computation
with Pool(cpu_count()//2) as p:
    res = list(tqdm(p.imap_unordered(os.system, [f'../exe/count_orbit_five {edgelist_path}/rw_{i}.edgelist opnmp > '
        f'/dev/null' for i in range(num_file)]), total=num_file, desc='Non-induced orbit counts'))

# read in the non-induced counts, organize and store
for i in tqdm(range(num_file), desc='Non-induced orbit -> (Non-)Induced pattern counts'):
    # read in the output file to get the non-induced orbit counts
    with open(f'output_evoke/out_rw_{i}', 'r') as f_in:
        non_induced = np.array([np.array([int(float(x)) for x in line.split()]) for line in f_in])

    # compute the induced orbit counts
    non_induced_t = np.transpose(non_induced)
    induced_3 = np.linalg.solve(matrices[3], non_induced_t[1:4, :])
    induced_4 = np.linalg.solve(matrices[4], non_induced_t[4:15, :])
    induced_5 = np.linalg.solve(matrices[5], non_induced_t[15:, :])
    induced = np.concatenate((non_induced_t[:1, :], induced_3, induced_4, induced_5), axis=0).T

    torch.save(non_induced, f'output_orbit/noninduced_rw_{i}.pt')
    torch.save(induced, f'output_orbit/induced_rw_{i}.pt')
